name: Continuous Integration  ## name appear under workflows in the GHA UI
## Review yaml - notate and comment - kds
## Build logs don't offer a clear start and end times - look into this.

on: ## Event that triggers the workflow - https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  push: 
    branches: [ review ]
      # - main
      # - dev
      # - fix_ci_issues
  pull_request:  ## nothing configured here
  # schedule:  ## Scheduled run of build per syntax below:
  #   - cron:  '0 9 * * *'  ## min, hour, day, month, day of week - this should run every day at 9am - confirm...

jobs:  ## Rememeber run in parallel by default - see https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobs
  build-ruby:  ## Job ID, no job name designated
    runs-on: ubuntu-18.04
    strategy:  ## Job matrix - see https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategy
      matrix:  ## Matrix - multiple jobs with variable substitution, they run in PARALLEL (confirm) - convoluted?  hard to monitor?  Refer to logs
        ruby-version: [2.2.10, 2.3.8, 2.4.10, 2.5.8, 2.6.6, 2.7.1, 3.0.0, jruby-9.2.12.0]
    steps:
      - uses: actions/checkout@v2

      - name: Build Ruby ${{ matrix.ruby-version }}
        uses: ./.github/actions/build-ruby  ## Uses action defined in this directory, requitred metadata file: action.yml - inquire as to the use of the JavaAcript (index.js)
        with:  ## Map of input parameters as key:value pairs, set as ENV variables
          ruby-version: ${{ matrix.ruby-version }}  ## Resulting ENV variable: INPUT_RUBY-VERSION - check this, ENV variable values changes with each matrix run?

  mini-env: ## sequential given the depenedency below (needs build-ruby)
    needs: build-ruby ## "needs" - Build-ruby must succeed in order for this job to run
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false  ## This option will NOT cancel any in-progress jobs, the default is true
      matrix: ## key: [values]
        rails: [norails, rails61, rails60, rails52, rails51, rails42, rails41, rails40, rails32, rails31, rails30]
        ruby-version: [2.2.10, 2.3.8, 2.4.10, 2.5.8, 2.6.6, 2.7.1, 3.0.0, jruby-9.2.12.0]
        exclude: ## Remove a jiob defined by the build matrix
          - ruby-version: "3.0.0"
            rails: rails30
          - ruby-version: "3.0.0"
            rails: rails31
          - ruby-version: "3.0.0"
            rails: rails32
          - ruby-version: "3.0.0"
            rails: rails40
          - ruby-version: "3.0.0"
            rails: rails41
          - ruby-version: "3.0.0"
            rails: rails42
          - ruby-version: "3.0.0"
            rails: rails50
          - ruby-version: "3.0.0"
            rails: rails51
          - ruby-version: "3.0.0"
            rails: rails52
          - ruby-version: "3.0.0"
            rails: rails60
          - ruby-version: "3.0.0"
            rails: rails61
          - ruby-version: "2.7.1"
            rails: rails30
          - ruby-version: "2.7.1"
            rails: rails31
          - ruby-version: "2.7.1"
            rails: rails32
          - ruby-version: "2.7.1"
            rails: rails40
          - ruby-version: "2.7.1"
            rails: rails41
          - ruby-version: "2.7.1"
            rails: rails42
          - ruby-version: "2.7.1"
            rails: rails50
          - ruby-version: "2.7.1"
            rails: rails51
          - ruby-version: "2.7.1"
            rails: rails52
          - ruby-version: "2.6.6"
            rails: rails30
          - ruby-version: "2.6.6"
            rails: rails31
          - ruby-version: "2.6.6"
            rails: rails32
          - ruby-version: "2.6.6"
            rails: rails40
          - ruby-version: "2.6.6"
            rails: rails41
          - ruby-version: "2.5.8"
            rails: rails30
          - ruby-version: "2.5.8"
            rails: rails31
          - ruby-version: "2.5.8"
            rails: rails40
          - ruby-version: "2.5.8"
            rails: rails41
          - ruby-version: "2.4.10"
            rails: rails30
          - ruby-version: "2.4.10"
            rails: rails31
          - ruby-version: "2.4.10"
            rails: rails40
          - ruby-version: "2.4.10"
            rails: rails41
          - ruby-version: "2.4.10"
            rails: rails60
          - ruby-version: "2.4.10"
            rails: rails61
          - ruby-version: "2.3.8"
            rails: rails60
          - ruby-version: "2.3.8"
            rails: rails61
          - ruby-version: "2.2.10"
            rails: rails60
          - ruby-version: "2.2.10"
            rails: rails61
          - ruby-version: "2.2.10"
            rails: rails52
          - ruby-version: "jruby-9.2.12.0"
            rails: rails30
          - ruby-version: "jruby-9.2.12.0"
            rails: rails31
          - ruby-version: "jruby-9.2.12.0"
            rails: rails32
          - ruby-version: "jruby-9.2.12.0"
            rails: rails40
          - ruby-version: "jruby-9.2.12.0"
            rails: rails41
          - ruby-version: "jruby-9.2.12.0"
            rails: rails60
          - ruby-version: "jruby-9.2.12.0"
            rails: rails61
          - ruby-version: "jruby-9.2.12.0"
            rails: rails52

    steps:  ## kds - Check if these steps occur for EACH instance of the matrix?  Can we not start services at the beginning prior to the start of the matrix?
      - uses: actions/checkout@v2

      - name: Build Ruby ${{ matrix.ruby-version }}
        uses: ./.github/actions/build-ruby
        with:
          ruby-version: ${{ matrix.ruby-version }}

      - name: Start mysql ## kds - ubuntu image has mysql installed, again propose custom image
        run: sudo systemctl start mysql

      - name: Run Unit Tests
        uses: nick-invision/retry@v1.0.0
        with:
          timeout_minutes: 20
          max_attempts: 2
          command:  bundle exec rake test:env[${{ matrix.rails }}] TESTOPTS="--verbose"
        env:  ## kds - ENV variables can be set once, is this declaring with every run of matrix?  Review logs
          DB_PORT: 3306
          MYSQL_PASSWORD: root

  


  ## Original Job        
  # multiverse: ## kds - run this multiverse section to test for build times
  #   needs: build-ruby
  #   runs-on: ubuntu-18.04
  #   services:  ## kds - separate images being used for these services, each requiring download?  Propose Custom Docker image with all services available?
  #     redis:
  #       image: redis
  #       ports:
  #         - 6379:6379
  #       options: >-
  #         --health-cmd "redis-cli ping"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #     mongodb:
  #       image: mongo
  #       ports:
  #         - 27017:27017
  #     rabbitmq:
  #       image: rabbitmq:latest
  #       ports:
  #         - 5672:5672
  #       options: >-
  #         --health-cmd "rabbitmqctl node_health_check"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #     memcached:
  #       image: memcached:latest
  #       ports:
  #         - 11211:11211
  #       options: >-
  #         --health-cmd "timeout 5 bash -c 'cat < /dev/null > /dev/udp/127.0.0.1/11211'"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       multiverse: [agent, api, background, background_2, database, httpclients, rails, rails_extras, rest, serialization, sinatra]
  #       ruby-version: [2.2.10, 2.3.8, 2.4.10, 2.5.8, 2.6.6, 2.7.1, 3.0.0, jruby-9.2.12.0]
  #       exclude:
  #         - ruby-version: "3.0.0"
  #           multiverse: api
  #         - ruby-version: "3.0.0"
  #           multiverse: sinatra
  #         - ruby-version: "3.0.0"
  #           multiverse: rails
  #         - ruby-version: "3.0.0"
  #           multiverse: rails_extras
  #         - ruby-version: "2.7.1"
  #           multiverse: api
  #         - ruby-version: "2.7.1"
  #           multiverse: sinatra
  #         - ruby-version: "jruby-9.2.12.0"
  #           multiverse: agent
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build Ruby ${{ matrix.ruby-version }}
  #       uses: ./.github/actions/build-ruby
  #       with:
  #         ruby-version: ${{ matrix.ruby-version }}

  #     - name: Start mysql
  #       run: sudo systemctl start mysql

  #     - name: Run Multiverse Tests
  #       uses: nick-invision/retry@v1.0.0
  #       with:
  #         timeout_minutes: 60
  #         max_attempts: 2
  #         command:  bundle exec rake test:multiverse[group=${{ matrix.multiverse }},verbose]
  #       env:
  #         DB_PORT: 3306
  #         MYSQL_PASSWORD: root

  #     - name: Annotate errors
  #       if: ${{ failure() }}
  #       uses: ./.github/actions/annotate

  

  ## New Multiverse Job        
  multiverse: ## kds - run this multiverse section to test for build times
    needs: build-ruby
    runs-on: ubuntu-18.04
    container:
      image: kentonshade/mycirrus_1:nr-multiverse  
      ## Missing packages and errors:
      ## apt-get install -y libssl-dev - installed
      ## apt-get install openjdk-8-jdk -y - installed
      ## zlib1g-dev - installed
      ## libyaml -  installed libyaml-0-2
      credentials:
         username: ${{ secrets.DOCKER_USER }}
         password: ${{ secrets.DOCKER_PASS }}
    # services:  ## kds - separate images being used for these services, each requiring download?  Propose Custom Docker image with all services available?
    #   redis:
    #     image: redis
    #     ports:
    #       - 6379:6379
    #     options: >-
    #       --health-cmd "redis-cli ping"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #   mongodb:
    #     image: mongo
    #     ports:
    #       - 27017:27017
    #   rabbitmq:
    #     image: rabbitmq:latest
    #     ports:
    #       - 5672:5672
    #     options: >-
    #       --health-cmd "rabbitmqctl node_health_check"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #   memcached:
    #     image: memcached:latest
    #     ports:
    #       - 11211:11211
    #     options: >-
    #       --health-cmd "timeout 5 bash -c 'cat < /dev/null > /dev/udp/127.0.0.1/11211'"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5

    strategy:
      fail-fast: false
      matrix:
        ## multiverse: [agent, api, background, background_2, database, httpclients, rails, rails_extras, rest, serialization, sinatra]
        multiverse: [agent, api]  ## Reducing for testing
        ruby-version: [2.2.10, 2.3.8, 2.4.10, 2.5.8, 2.6.6, 2.7.1, 3.0.0, jruby-9.2.12.0]
        exclude:
          - ruby-version: "3.0.0"
            multiverse: api
          - ruby-version: "3.0.0"
            multiverse: sinatra
          - ruby-version: "3.0.0"
            multiverse: rails
          - ruby-version: "3.0.0"
            multiverse: rails_extras
          - ruby-version: "2.7.1"
            multiverse: api
          - ruby-version: "2.7.1"
            multiverse: sinatra
          - ruby-version: "jruby-9.2.12.0"
            multiverse: agent
    steps:
      - uses: actions/checkout@v2

      ## NEW
      - name: Multiverse Starting Services
        run: .github/workflows/scripts/multiverse-start-services.sh

      - name: Build Ruby ${{ matrix.ruby-version }}
        uses: ./.github/actions/build-ruby
        with:
          ruby-version: ${{ matrix.ruby-version }}

      ### Testing only  -nick-invision is failing
      - name: test multiverse Tests
        run: /
          chmod -R u+x /__w/_temp/
          bundle exec rake test:multiverse[group=agent,verbose]

      # - name: Start mysql
      #   run: sudo systemctl start mysql

      - name: Run Multiverse Tests
        uses: nick-invision/retry@v1.0.0
        with:
          timeout_minutes: 60
          max_attempts: 2
          command:  bundle exec rake test:multiverse[group=${{ matrix.multiverse }},verbose]
        env: ## kds -should not be necessary?
          DB_PORT: 3306
          MYSQL_PASSWORD: root

      - name: Annotate errors
        if: ${{ failure() }}
        uses: ./.github/actions/annotate

  



  infinite_tracing:
    needs: build-ruby
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        ruby-version: [2.5.8, 2.6.6, 2.7.1]
    steps:
      - uses: actions/checkout@v2

      - name: Build Ruby ${{ matrix.ruby-version }}
        uses: ./.github/actions/build-ruby
        with:
          ruby-version: ${{ matrix.ruby-version }}

      - name: Run Multiverse Tests
        uses: nick-invision/retry@v1.0.0
        with:
          timeout_minutes: 40
          max_attempts: 6
          command:  bundle exec rake test:multiverse[group=infinite_tracing,verbose]

      - name: Annotate errors
        if: ${{ failure() }}
        uses: ./.github/actions/annotate
